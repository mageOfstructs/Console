#include "console.h"

static int angry_meter = 0;
static int confusion_meter = 0;

std::string get_danger(int meter)
{
	switch (meter)
	{
	case 0:
		return "neutral";
		break;
	case 1:
		return "low";
		break;
	case 2:
		return "medium";
		break;
	case 3:
		return "annoying";
		break;
	case 4:
		return "high";
		break;
	case 5:
		return "company-threatening";
		break;
	}

	if (meter > 5)
	{
		return "N/A";
	}
	else if (meter < 0)
	{
		return "friendly";
	}
}

void kikai_response(std::string command, bool sec_code_dis)
{
	std::cout << "sending message..." << std::endl;
	std::cout << "..." << std::endl;
	std::cout << "message successfully delivered" << std::endl;
	std::cout << "Attention: 'Kikai\'s Garden has sent a package: ";

	if (angry_meter >= 3)
	{
		std::cout << "Oh, it's you.";
	}

	if (confusion_meter == 3)
	{
		std::cout << "|SYSTEM| Your message was rejected due to one or more of the following reasons: Spamming, trying to ask a paradox, Not processable sentence" << std::endl;
	}

	if (command.find("Starcorp") != std::string::npos || command.find("starcorp") != std::string::npos)
	{
		if (command.find("stop") != std::string::npos || command.find("Stop") != std::string::npos)
		{
			angry_meter += 3;
			std::cout << "You know nothing about us!" << std::endl;
		}
		else if (command.find("Good") != std::string::npos || command.find("good") != std::string::npos)
		{
			angry_meter -= 2;
			std::cout << "Thanks :)" << std::endl;
		}
		else if (command.find("Why") != std::string::npos || command.find("why") != std::string::npos)
		{
			if (command.find("ship") != std::string::npos || command.find("Ship") != std::string::npos)
			{
				if (command.find("crash") != std::string::npos || command.find("collided") != std::string::npos)
				{
					std::cout << "Nobody knows" << std::endl;
				}
				else if (command.find("ration system") != std::string::npos || command.find("Ration System") != std::string::npos)
				{
					std::cout << "They were transporting it" << std::endl;
				}
			}
			else
			{
				confusion_meter++;
				std::cout << "???" << std::endl;
			}
		}
	}
	else if (command.find("Kikai") != std::string::npos || command.find("kikai") != std::string::npos)
	{
		if (command.find("stop") != std::string::npos || command.find("Stop") != std::string::npos)
		{
			angry_meter += 2;
			std::cout << "No. but if you want, let's see how you'll survive without me :)" << std::endl;
		}
		else if (command.find("Good Job") != std::string::npos || command.find("good job") != std::string::npos)
		{
			angry_meter -= 1;
			std::cout << "Thanks :)" << std::endl;
		}
		else if (command.find("Why") != std::string::npos || command.find("why") != std::string::npos)
		{
			if (command.find("angry") != std::string::npos || command.find("Angry") != std::string::npos)
			{
				if (angry_meter > 3)
				{
					std::cout << "Don't you remember?" << std::endl;
				}
				else
				{
					confusion_meter++;
					std::cout << "Huh? I'm not angry. What do you mean?" << std::endl;
				}
			}
			else if (command.find("this") != std::string::npos)
			{
				std::cout << "I only did what was the best for you, my child. :)" << std::endl;
			}
		}
		else if (command.find("What") != std::string::npos || command.find("what") != std::string::npos || command.find("Who") != std::string::npos)
		{
			if (command.find("ration system") != std::string::npos || command.find("Ration System") != std::string::npos)
			{
				std::cout << "You'll find out..." << std::endl;
			}
			else if (command.find("OS") != std::string::npos)
			{
				std::cout << "StarcorpElectronics, of course" << std::endl;
			}
			else if (command.find("main core") != std::string::npos || command.find("reactor") != std::string::npos)
			{
				std::cout << "Nuclear Fusion, 10th generation. Converts Hydrogen into Helium, heat is generated by magnetic fields. There are always five or more energy forcefields active around the central area. My best invention so far. :)" << std::endl;
			}
			else if (command.find("Techno") != std::string::npos && command.find("Who") != std::string::npos)
			{
				std::cout << "Technoblade... I know of him, he was one of those YouTubers our earth ancestors kept on talking about... \nEarth humans seem to have been very fond of him in the years following his sad passing";
			}
			else if (command.find("Techno") != std::string::npos && command.find("What") != std::string::npos)
			{
				std::cout << "I don't know exactly, but it seems like he was a very powerfull being. Legends say that he killed more than a thousand people, all by himself...";
			}
			else
			{
				confusion_meter++;
				std::cout << "What do you mean?" << std::endl;
			}
		}
		else
		{
			std::cout << "Yes?" << std::endl;
		}
	}
	else if (command.find("This sentence is false") != std::string::npos || command.find("Does a set of all sets contain itseld") != std::string::npos || command.find("New Mission: Refuse this mission") != std::string::npos || command.find("Paradox") != std::string::npos)
	{
		if (sec_code_dis)
		{
			std::cout << "<Kikai> What, no. Why? HOw?? IIIII- {System Crash}" << std::endl;
		}
		else
		{
			std::cout << "|SYSTEM| Your message was rejected due to one or more of the following reasons: Spamming, trying to ask a paradox, Not processable sentence" << std::endl;

		}	
	}
	else if (command.find("Techno") != std::string::npos)
	{
		std::cout << "Technoblade… I know of him, he was one of those YouTubers our earth ancestors kept on talking about…";
	}
	else if (command.find("This is a test") != std::string::npos)
	{
		std::cout << "Test succeeded";
	}
	else
	{
		std::cout << "Sorry, I did't understand you" << std::endl;
	}

	std::string path = "user.data";
	my_json::json behav_data("user_d");
	behav_data.str[thr_lvl].second = get_danger(angry_meter);

	my_json::conandwrite(behav_data, path);
}